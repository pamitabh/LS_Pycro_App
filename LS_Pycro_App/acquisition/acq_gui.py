from LS_Pycro_App.utils.exceptions import AbortFlag
from LS_Pycro_App.views import AcqDialog, AbortDialog


class AcqGui():
    #interfacing with autogenerated pyqt5 elements becomes increasingly annoying because you can't interface or
    #inherit them (without writing custom PyQt5 GUI code, which is against the entire purpose of autogenerated code). 
    #This AcqDialog typehint should be thought of as an interface for any AcqDialog related PyQt5 element that 
    #contains the required widgets and signals (abort button, fish_update, etc.)
    def __init__(self, acq_dialog: AcqDialog, abort_dialog: AbortDialog, abort_flag: AbortFlag):
        self._acq_dialog = acq_dialog
        self._abort_dialog = abort_dialog
        self._abort_flag = abort_flag
        self._acq_dialog.abort_button.clicked.connect(self._abort_button_clicked)
        self._abort_dialog.abort_button.clicked.connect(self._abort_confirm_button_clicked)
        self._abort_dialog.cancel_button.clicked.connect(self._cancel_button_clicked)

    def fish_update(self, fish_num: int):
        self._acq_dialog.fish_update.emit(f"Fish {fish_num}")

    def region_update(self, region_num: int):
        self._acq_dialog.region_update.emit(f"Region {region_num}")

    def status_update(self, message: str):
        self._acq_dialog.acq_update.emit(message)

    #abort/exception implementation
    def _abort_button_clicked(self): 
        self._abort_dialog.show()
        self._abort_dialog.activateWindow()

    def _abort_confirm_button_clicked(self):
        """
        If confirmed, acquisition will be aborted.
        """
        self._abort_dialog.close()
        self._abort_flag.abort= True

    def _cancel_button_clicked(self):
        self._abort_dialog.close()


class CLSAcqGui(AcqGui):
    def timepoint_update(self, timepoint_num: int):
        self._acq_dialog.timepoint_update.emit(f"Timepoint {timepoint_num}")


class HTLSAcqGui(AcqGui):
    pass